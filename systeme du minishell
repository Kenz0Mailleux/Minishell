### Structure Totale du Minishell

Ton projet **Minishell** est structuré autour de plusieurs structures de données qui organisent et traitent les commandes utilisateur en plusieurs étapes. Voici un résumé global de la manière dont les principales structures interagissent et contribuent au fonctionnement global du shell.

---

#### 1. **Structure Principale : `t_data`**
Cette structure regroupe toutes les informations nécessaires à l'exécution du minishell. Elle sert de point d'accès à d'autres structures importantes.

- **Champs** :
  - `env_all` : Liste chaînée de toutes les variables d'environnement globales.
  - `env_cmd` : Liste chaînée des variables d'environnement locales à chaque commande.
  - `token` : Liste chaînée des tokens produits par le lexer (chaque token représente une partie de l'entrée utilisateur).
  - `cmd` : Liste chaînée des commandes (chaque élément représente une commande séparée par des pipes ou accompagnée de redirections).

---

#### 2. **Lexeur : Structure `t_token`**
Le lexer transforme la ligne de commande utilisateur en une liste de **tokens**. Chaque token représente un mot, une commande, un symbole de redirection, ou un pipe.

- **Champs** :
  - `str` : Chaîne de caractères correspondant au contenu du token.
  - `type` : Type du token (par exemple `CMD`, `PIPE`, `APPEND`, etc.).
  - `env` : Liste chaînée de variables d'environnement associées au token.
  - `prev` et `next` : Pointeurs pour naviguer dans la liste chaînée de tokens.

---

#### 3. **Parsing : Structure `t_cmd`**
Après avoir analysé les tokens, le parser les organise en **commandes**. Chaque commande peut être composée d'arguments, de redirections et peut être liée à d'autres commandes via des pipes.

- **Champs** :
  - `tab_cmd` : Tableau de chaînes de caractères, où chaque élément est un argument ou un nom de commande.
  - `tab_len` : Longueur du tableau d'arguments.
  - `redirect` : Liste chaînée des redirections associées à la commande (définie par `t_redirect`).
  - `cmd_env` : Variables d'environnement locales spécifiques à cette commande.
  - `num_cmd` : Numéro de la commande dans la séquence (utile pour les commandes séparées par des pipes).
  - `prev` et `next` : Pointeurs pour créer une liste chaînée de commandes.

---

#### 4. **Redirections : Structure `t_redirect`**
Une commande peut avoir des redirections pour rediriger son entrée ou sortie. Ces redirections sont stockées dans une liste chaînée propre à chaque commande.

- **Champs** :
  - `type` : Type de redirection (APPEND `>>`, HEREDOC `<<`, REDIRECT_IN `>`, REDIRECT_OUT `<`).
  - `str` : Chaîne de caractères représentant la cible de la redirection (fichier ou autre).
  - `prev` et `next` : Pointeurs pour gérer une liste chaînée de redirections.

---

#### 5. **Variables d'Environnement : Structure `t_env`**
Les variables d'environnement sont gérées sous forme de listes chaînées et sont soit globales (`env_all`), soit locales à une commande (`env_cmd`).

- **Champs** :
  - `key` : Clé de la variable d'environnement (par exemple, `PATH`).
  - `value` : Valeur associée à la clé (par exemple, `/usr/bin`).
  - `export` : Indicateur si la variable est exportée dans l'environnement global.
  - `prev` et `next` : Pointeurs pour gérer une liste chaînée de variables.

---

### Processus Global du Minishell

1. **Lexing** : La ligne de commande entrée par l'utilisateur est d'abord découpée en **tokens** (mots, symboles, etc.). Chaque token est stocké dans une structure `t_token` liée à d'autres tokens dans une liste chaînée.
   
2. **Parsing** : Les tokens sont ensuite analysés pour créer des **commandes** (`t_cmd`). Chaque commande a un tableau d'arguments (`tab_cmd`), et peut avoir des redirections associées (`t_redirect`). Les commandes peuvent être séparées par des pipes, et dans ce cas, elles sont liées entre elles dans une liste chaînée.
   
3. **Exécution** :
   - Chaque commande est exécutée en utilisant les arguments stockés dans `tab_cmd`.
   - Les **redirections** sont appliquées en parcourant la liste chaînée de `t_redirect` pour la commande correspondante.
   - Les variables d'environnement sont expansées lors de l'exécution via la structure `t_env`.
   
4. **Variables d'Environnement** : Les variables d'environnement sont gérées globalement (`env_all`) ou localement à chaque commande (`env_cmd`). Le système permet de manipuler ces variables, de les exporter, et de les utiliser pour des expansions de variables (comme `$VAR` dans une commande).

---

### Récapitulatif pour un Collaborateur (Exécuteur)

Ton shell est organisé en plusieurs structures chaînées pour gérer efficacement les commandes, arguments, redirections, et variables d'environnement. L'exécuteur devra :

- **Parcourir la liste des commandes (`t_cmd`)** pour chaque commande dans la ligne d'entrée.
- **Gérer les redirections (`t_redirect`)** associées à chaque commande avant son exécution.
- **Traiter les variables d'environnement** dans chaque commande en utilisant les expansions nécessaires.
- **Lier les commandes par des pipes**, en utilisant les pointeurs `next` et `prev` dans la liste chaînée `t_cmd`.

Ce système est flexible et modulaire, permettant de traiter des commandes complexes avec plusieurs arguments, redirections, et pipes, tout en respectant la gestion des variables d'environnement.